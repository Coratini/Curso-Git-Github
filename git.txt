Alguns comandos do git para usar no terminal: 

Untracked -> Quando o arquivo ainda não foi visto pelo Git;

Unmodified -> Quando o arquivo não teve nenhuma modificação;

Modified -> Quando o arquivo foi editado mas ainda não foi levado para ser salvo pelo git;

Staged -> Quando o arquivo estiver pronto para ser commitado e ser salvo;


-----------@@@@@@@@@------------@@@@@@@@@@@@@@@-----------@@@@@@@@@@@@@@@@@@@@@------------@@@@@@@@@@@@@--------------

Usando o Git Log:

git log -> serve para ver o histórico, qual a versão, rash do commit, o autor, a data e a mensagem do commit;

git log --decorate -> Para ver se o arquivo foi de qual branch para qual branch, se houve o merge, quais tags foram geradas;

git log --author="Lucas" -> Filtrar pelo nome do autor que fez os commits;

git shortlog -> Ele monstra para o usuário em ordem alfabética quais foram os autores, quantos commits fizeram e quais eles foram;

if(quiser ver só a quantidade de commit e o autor)
{
    git shortlog -sn;
}

else{
    git shortlog;
}

git log --graph -> Ele monstra em forma gráfica o que está acontecendo com as branchs e com as versões.

INFORMAÇÃO IMPORANTE: DENTRO DO GIT LOG NÓS TEMOS UMA RASH, PELA RASH CONSEGUIMOS IDENTIFICAR O QUE FOI FEITO NO COMMIT, SE FOI ADICIONADO OU SE NÃO FOI...

EX: "git show 7a44f8a0810ab29aefb525fac9ff9f9091cfefc8" Conseguimos ver o que foi adicionado no commit, entre outras coisas. Como se fosse um histórico só daquele commit;

------------$$$$$$$$$$-------------$$$$$$$$$$$$$$$$$-----------$$$$$$$$$$-----------$$$$$$$$$$$$$$$$----------$$$$$$$$$$$$$$------------$$$$$$$$$$$$$---------------

git diff -> Permite que a gente veja as mudanças antes mesmo da gente enviar e fazer o commit. Ou seja, antes de dar o staged conseguimos ver as alterações que fizemos
no arquivo, garantindo que não vá nada de errado para o commit; Sempre usar o git diff antes de fazer um commit, assim você consegue olhar as coisas que você fez;

git diff --name-only -> É para dizer somente o nome do arquivo que foi modificado, caso tenha muitos arquivos;

USE:
git commit -am "mensagem de commit" -> Só irá usar esse comando caso o arquivo já existir e você estiver fazendo alguma alteração nele, usando esse
comando ele será commitado direto sem precisar dar o git add .;

-------------#########--------------##################--------------###############----------------###############----------------##################-------------------

DESFAZENDO COISAS NO GIT:

git checkout nomedoarquivo.extensão -> Após você ter modificado um arquivo e ele estiver em modified ainda e você quiser descartar a alteração; 
Caso ja esteja em stagied pronto para ser commitado o checkout não irá funcionar;

git reset HEAD nomedoarquivo.extensão -> Esse comando é caso você ja deu o git add ou ele ja esteja em staged. No caso esse comando irá tirar do stagied e pro modified e 
com o checkout e com diff você irá conseguir ver suas alterações e descartar se quiser;

IMPORTANTE: FAZER O COMMIT SEM QUERER E QUERER DESFAZER O QUE JÁ FOI PARA O COMMIT.

EXISTEM 3 TIPOS DE COMANDOS DE RESET

(git reset --soft --mixed --hard)

git reset --soft -> Ele vai pegar minhas modificações e vai só voltar/apagar o commit, mas o arquivo vai estar em staged com a modificação pronta para ser commitado novamente;

git reset --mixed -> Ele vai matar o commit também, só que vai voltar meus arquivos para antes do stagied, ou seja, vai voltar no modified;

git reset --hard -> Ele vai simplesmente ignorar a existência desse commit e tudo que foi feito nele. Um reset bem bruto que apagará tudo que foi feito voltando para
 a versão antes de fazer o commit da modificação;

 OBS: PARA RETORNAR O COMMIT DEVEMOS SEMPRE ESCOLHER O COMMIT ANTERIOR DO QUE FOI FEITO. UMA VEZ QUE O COMMIT QUE VOCÊ NÃO QUER MAIS, NÃO IRÁ EXISTIR;

 GIT RESET --HARD -> TER CUIDADO POIS ELE ALTERA O HISTÓRICO DO COMMIT!

---------&&&&&&&&&&---------------&&&&&&&&&&-------------&&&&&&&&&&&&&--------------------&&&&&&&&&&&&&&&&&---------------

 Tudo sobre branchs:

 Criar branch: git checkout -b "nome da branch"

 Deletar branch: git branch -D "nome da branch"

 Mudar de uma branch para outra: git checkout "nome da branch"


 Git Stash

 git stash -> Ele é responsável por guardar alterações que ainda não foram comitadas numa pasta/arquivo e que eu possa chamar depois quando achar necessário;

 git stash apply -> Ele vai aplicar as mudanças que tinha salvo na pasta/arquivo "invisivel";

 git stash list -> Ele mostra uma lista de todos os stash que tiver sendo feito;

 git stash clear -> Ele limpa tudo o que estiver no stash, para não ter mais nenhuma modificação lá guardada.


CONTROLE DE VERSÃO: FERRAMENTA QUE CONTROLA AS ALTERAÇÕES FEITAS EM DETERMINADO CÓDIGO. TEM UM HISTÓRICO DE
ALTERAÇÕES CASO VOCE QUEIRA RESGATAR UMA VEZ SALVO.

Comandos do GIT:

git init -> inicializar um repositório dentro de uma estrutura.
git clone -> serve para poder obter uma estrutura de projeto de um repositório remoto. Serve para clonar um repositório. 
git add . ou git add <<nome_arquivo>> -> serve para adicionar arquivos para que o git possa rastrear
git commit -m 'mensagem de commit' -> mensagem de commit do arquivo, para que fique claro o que foi feito naquela alteração
git push(empurrar) -> uma forma de poder publicar nossas alterações em um servidor remoto;

Servidor Remoto -> É aquele que esta num servidor, é aquele que esta sendo compartilhado com todos do time.
Servidor Local -> É aquele que você criou na sua maquina;

git pull(puxar) -> Atualizar seu repositório local, conforme esta o seu remoto pegando as alterações que foram feitas;
git merge -> Juntar alterações de arquivos entre branchs; Resolução de conflitos. Qual alteração é valida no mesmo arquivo.
git status -> vai prover informações referente ao estado atual do projeto, se tem arquivo adicionado ou não, se foi apagado etc
git log -> vai devolver um histórico de alterações que o nosso repositório foi tendo ao longo do tempo.
git branch <<nome da branch>> -> é quando você cria um novo ramo no projeto, além da master(produção). 

 





